"""split satellite table into satellite and satellite designation

Revision ID: 0219dd6a5b68
Revises: a23d969e948e
Create Date: 2025-09-16 10:37:04.472304

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "0219dd6a5b68"
down_revision = "a23d969e948e"
branch_labels = None
depends_on = None


def upgrade():
    op.create_table(
        "satellite_designation",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("sat_id", sa.Integer(), nullable=False),
        sa.Column("sat_name", sa.Text(), nullable=False),
        sa.Column("sat_number", sa.Integer(), nullable=False),
        sa.Column("valid_from", sa.DateTime(timezone=True), nullable=False),
        sa.Column("valid_to", sa.DateTime(timezone=True), nullable=True),
        sa.Column("date_added", sa.DateTime(timezone=True), nullable=False),
        sa.Column("date_modified", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["sat_id"],
            ["satellites.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "sat_number",
            "sat_name",
            "sat_id",
            "valid_from",
            "valid_to",
            name="satellite_designation_unique_period",
        ),
    )
    op.create_index(
        "idx_sat_des_designation_lookup",
        "satellite_designation",
        ["sat_number", "sat_name", "sat_id"],
        unique=False,
    )
    op.create_index(
        "idx_sat_des_sat_id_temporal",
        "satellite_designation",
        ["sat_id", "valid_from", "valid_to"],
        unique=False,
    )
    op.create_index(
        "idx_sat_des_sat_number_sat_name",
        "satellite_designation",
        ["sat_number", "sat_name"],
        unique=False,
    )
    op.create_index(
        "idx_sat_des_temporal_periods",
        "satellite_designation",
        ["sat_id", "valid_from", "valid_to"],
        unique=False,
    )
    op.create_index(
        "idx_sat_des_temporal_range",
        "satellite_designation",
        ["valid_from", "valid_to"],
        unique=False,
    )
    op.create_index(
        "idx_sat_des_valid_from", "satellite_designation", ["valid_from"], unique=False
    )
    op.create_index(
        "idx_sat_des_valid_to", "satellite_designation", ["valid_to"], unique=False
    )

    op.create_index(
        "idx_satellites_active",
        "satellites",
        ["decay_date"],
        unique=False,
        postgresql_where="(decay_date IS NOT NULL)",
    )
    op.create_index(
        "idx_satellites_active_covering",
        "satellites",
        ["launch_date", "decay_date"],
        unique=False,
        postgresql_include=["id", "constellation", "object_id", "object_type"],
    )
    op.create_index(
        "idx_satellites_active_range",
        "satellites",
        ["launch_date", "decay_date"],
        unique=False,
    )
    op.create_index(
        "idx_satellites_decay_date", "satellites", ["decay_date"], unique=False
    )
    op.create_index(
        "idx_satellites_launch_date", "satellites", ["launch_date"], unique=False
    )
    op.create_unique_constraint(None, "satellites", ["object_id"])
    op.drop_column("satellites", "sat_number")
    op.drop_column("satellites", "has_current_sat_number")
    op.drop_column("satellites", "sat_name")
    op.drop_column("satellites", "other_ids")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "satellites",
        sa.Column(
            "other_ids",
            postgresql.ARRAY(sa.INTEGER()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "satellites",
        sa.Column("sat_name", sa.TEXT(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "satellites",
        sa.Column(
            "has_current_sat_number",
            sa.BOOLEAN(),
            server_default=sa.text("false"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "satellites",
        sa.Column("sat_number", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "satellites", type_="unique")
    op.drop_index("idx_satellites_launch_date", table_name="satellites")
    op.drop_index("idx_satellites_decay_date", table_name="satellites")
    op.drop_index("idx_satellites_active_range", table_name="satellites")
    op.drop_index(
        "idx_satellites_active_covering",
        table_name="satellites",
        postgresql_include=["id", "constellation", "object_id", "object_type"],
    )
    op.drop_index(
        "idx_satellites_active",
        table_name="satellites",
        postgresql_where="(decay_date IS NOT NULL)",
    )
    op.create_unique_constraint(
        "satellites_unique_name_number_key", "satellites", ["sat_number", "sat_name"]
    )

    op.drop_index("idx_sat_des_valid_to", table_name="satellite_designation")
    op.drop_index("idx_sat_des_valid_from", table_name="satellite_designation")
    op.drop_index("idx_sat_des_temporal_range", table_name="satellite_designation")
    op.drop_index("idx_sat_des_temporal_periods", table_name="satellite_designation")
    op.drop_index("idx_sat_des_sat_number_sat_name", table_name="satellite_designation")
    op.drop_index("idx_sat_des_sat_id_temporal", table_name="satellite_designation")
    op.drop_index("idx_sat_des_designation_lookup", table_name="satellite_designation")
    op.drop_table("satellite_designation")
    # ### end Alembic commands ###
