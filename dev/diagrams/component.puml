@startuml SatCheckerComponentDiagram

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

LAYOUT_WITH_LEGEND()


title SatChecker - Component Diagram

Container(WebApplication, "Web Application", "TBD", "Interacts with the system")
Container(API, "API", "Flask","Uses flare/pass alerts for high value targets")

Container_Boundary(SatChecker, "SatChecker API") {
    ComponentDb(shared_Database, "Database", "PostgreSQL", "Stores all data")
    ComponentQueue(shared_Cache, "Cache", "Redis", "Stores cached ephemeris data")
    Component(propagation, "Propagation Strategy Library", "Python", "Calculates satellite positions")

    Boundary(shared, "Shared Resources"){
            Component(validationService, "Input Validation Service", "Flask", "Validates request parameters")
            Component(tleRepository, "TLE Repository", "Python", "Retrieves TLE data")
            Component(satelliteRepository, "Satellite Repository", "Python", "Retrieves satellite data")
        }


    Boundary(ephem, "Ephemeris") {
        Component(ephem_Routes, "Ephemeris Routes", "Flask", "Handles HTTP requests for ephemeris data")
        Component(ephem_EphemerisService, "Ephemeris Service", "Python", "Generates ephemeris data")
        Component(ephem_Tasks, "Ephemeris Tasks", "Celery", "Handles async tasks for ephemeris generation")
    }

    Boundary(fov, "Field of View") {
        Component(fov_Routes, "Field of View Routes", "Flask", "Handles HTTP requests for field of view")
        Component(fov_FovService, "Field of View Service", "Python", "Calculates satellites passing through a field of view")
    }

    Boundary(info, "Satellite Info") {
        Component(info_Routes, "Satellite Info Routes", "Flask", "Handles HTTP requests for satellite info")
        Component(info_InfoService, "Satellite Info Service", "Python", "Provides general info on satellites")
    }

    Boundary(alert, "Alerts") {
        Component(alert_Routes, "Alert Routes", "Flask", "Handles HTTP requests for alerts")
        Component(alert_NotificationService, "Notification Service", "Python", "Sends alerts for satellite flares/passes")
    }


}

Rel(WebApplication, ephem_Routes, "Visits for ephemeris data", "HTTPS")
Rel(WebApplication, fov_Routes, "Visits for field of view data", "HTTPS")
Rel(WebApplication, info_Routes, "Visits for satellite/TLE data", "HTTPS")
Rel(WebApplication, alert_Routes, "Subscribes to alerts", "HTTPS")

Rel(ephem_Routes, ephem_EphemerisService, "Calls", "Python")
Rel(fov_Routes, fov_FovService, "Calls", "Python")
Rel(info_Routes, info_InfoService, "Calls", "Python")
Rel(alert_Routes, alert_NotificationService, "Calls", "Python")

Rel(tleRepository, shared_Database, "Reads from", "SQLAlchemy")
Rel(satelliteRepository, shared_Database, "Reads from", "SQLAlchemy")

Rel(ephem_EphemerisService, ephem_Tasks, "Distributes", "Celery/async")
Rel(ephem_EphemerisService, tleRepository, "Retrieves data", "Python")

Rel(fov_FovService, ephem_EphemerisService, "Calls", "Python")

BiRel(ephem_Tasks, shared_Cache, "Saves to/Reads from", "Redis")
Rel(ephem_Tasks, propagation, "Calls", "Python")

Rel(ephem_Routes, validationService, "Calls", "Python")
Rel(fov_Routes, validationService, "Calls", "Python")

Rel(info_InfoService, satelliteRepository, "Retrieves data", "Python")
Rel(info_InfoService, tleRepository, "Retrieves data", "Python")

Rel(API, ephem_Routes, "Calls for ephemeris data", "HTTPS")
Rel(API, fov_Routes, "Calls for field of view data", "HTTPS")
Rel(API, info_Routes, "Calls for satellite/TLE data", "HTTPS")
BiRel(API, alert_Routes, "Subscribes to/receives alerts", "HTTPS/Webhook")

Rel(alert_NotificationService, shared_Database, "Saves settings", "SQLAlchemy")


SHOW_LEGEND()

@enduml
