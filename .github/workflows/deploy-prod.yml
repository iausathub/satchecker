# This workflow will build and push a new container image to Amazon ECR,
# and then will force a new deployment of the service containing the api,
# when there is a push to the "main" branch.

name: Deploy to Amazon ECS

on:
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
      tags:
        description: 'Test scenario tags'

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: satchecker_api
  ECS_SERVICE: satchecker
  ECS_CLUSTER: satchecker-api-cluster
  ECS_TASK_DEFINITION: satchecker-api-prod-td
  CONTAINER_NAME: satchecker_api

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: main

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-mock
        pip install -r api/requirements.txt;
    - name: Test with pytest
      run: |
        pytest

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: prod
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        cd api
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT


    - name: Force service deployment
      run: |
        aws ecs update-service --cluster  ${{ env.ECS_CLUSTER }} --service ${{ env.ECS_SERVICE }} --force-new-deployment

    - name: Wait for service stability
      run: |
        aws ecs wait services-stable --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }}
