name: Radon Code Complexity Analysis

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  analyze-complexity:
    name: Analyze Code Complexity
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install radon jq

      - name: Run Radon and generate report
        run: |
          run: |
          echo "## 游빑 Radon Complexity Report" >> $GITHUB_STEP_SUMMARY
          echo "| File | Function | Complexity | Rating |" >> $GITHUB_STEP_SUMMARY
          echo "|------|----------|------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Debug: save raw JSON output
          radon cc src/api -a -nc --json > radon_output.json
          
          # Process with improved jq command
          cat radon_output.json | jq -r '
            to_entries[] | 
            .key as $file | 
            .value[] | 
            select(.type == "function") |  # Ensure we only process functions
            {
              file: $file,
              name: .name,
              complexity: .complexity,
              rating: 
                (if .complexity < 5 then "游릭 A"
                 elif .complexity < 10 then "游릭 B"
                 elif .complexity < 20 then "游리 C"
                 elif .complexity < 30 then "游리 D"
                 elif .complexity < 40 then "游댮 E"
                 else "游댮 F" end)
            } |
            "| \(.file) | \(.name) | \(.complexity) | \(.rating) |"
          ' >> $GITHUB_STEP_SUMMARY
          
          # Debug: count functions
          echo "## Debug Information" >> $GITHUB_STEP_SUMMARY
          echo "Total functions found: $(cat radon_output.json | jq '[to_entries[] | .value | length] | add')" >> $GITHUB_STEP_SUMMARY



      - name: Run Maintainability Index Report
        run: |
          echo "## 游늵 Maintainability Index Report" >> $GITHUB_STEP_SUMMARY
          echo "| File | Maintainability Index | Rank |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----------------------|------|" >> $GITHUB_STEP_SUMMARY
          
          radon mi src/api --json | jq -r '
            to_entries[] |
            "| \(.key) | \(.value.mi) | \(.value.rank) |"
          ' >> $GITHUB_STEP_SUMMARY

      - name: Fail on high complexity (Optional)
        run: |
          MAX_COMPLEXITY=20
          EXIT_CODE=0
          echo "## 游뚿 High Complexity Functions Detected" >> $GITHUB_STEP_SUMMARY
          echo "| File | Function | Complexity | Rating |" >> $GITHUB_STEP_SUMMARY
          echo "|------|----------|------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          radon cc src/api -nc --json | jq -r '
            to_entries[] | 
            .key as $file | 
            .value[] | 
            select(.complexity > '"$MAX_COMPLEXITY"') |
            "| \($file) | \(.name) | \(.complexity) | " + 
            (if .complexity < 5 then "游릭 A"
             elif .complexity < 10 then "游릭 B"
             elif .complexity < 20 then "游리 C"
             elif .complexity < 30 then "游리 D"
             elif .complexity < 40 then "游댮 E"
             else "游댮 F" end) + " |"
          ' >> $GITHUB_STEP_SUMMARY
          
          if grep -q "游댮 F" $GITHUB_STEP_SUMMARY; then
            EXIT_CODE=1
          fi
          exit $EXIT_CODE
        continue-on-error: false
