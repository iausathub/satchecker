name: Radon Code Complexity Analysis

on:
  workflow_call:
    # This allows the workflow to be called by other workflows

jobs:
  analyze-complexity:
    name: Analyze Code Complexity
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install radon jq

      - name: Run Radon and generate report
        run: |
          echo "## 游빑 Radon Complexity Report" >> $GITHUB_STEP_SUMMARY
          echo "| File | Function | Complexity | Rating |" >> $GITHUB_STEP_SUMMARY
          echo "|------|----------|------------|--------|" >> $GITHUB_STEP_SUMMARY

          radon cc src/api -a -nc --json | jq -r '
            keys[] as $file |
            .[$file][] |
            "| \($file) | \(.name) | \(.complexity) | \(
              if .complexity < 5 then "游릭 A"
              elif .complexity < 10 then "游릭 B"
              elif .complexity < 20 then "游리 C"
              elif .complexity < 30 then "游리 D"
              elif .complexity < 40 then "游댮 E"
              else "游댮 F" end
            ) |"
          ' >> $GITHUB_STEP_SUMMARY

      - name: Run Maintainability Index Report
        run: |
          echo "## 游늵 Maintainability Index Report" >> $GITHUB_STEP_SUMMARY
          echo "| File | Maintainability Index | Rank |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-----------------------|------|" >> $GITHUB_STEP_SUMMARY

          radon mi src/api --json | jq -r '
            to_entries[] |
            "| \(.key) | \(.value.mi) | \(.value.rank) |"
          ' >> $GITHUB_STEP_SUMMARY

      - name: Fail on high complexity (Optional)
        run: |
          MAX_COMPLEXITY=20
          EXIT_CODE=0
          echo "## 游뚿 High Complexity Functions Detected" >> $GITHUB_STEP_SUMMARY
          echo "| File | Function | Complexity | Rating |" >> $GITHUB_STEP_SUMMARY
          echo "|------|----------|------------|--------|" >> $GITHUB_STEP_SUMMARY

          radon cc src/api -nc --json | jq -r '
            to_entries[] |
            .key as $file |
            .value[] |
            select(.complexity > '"$MAX_COMPLEXITY"') |
            "| \($file) | \(.name) | \(.complexity) | " +
            (if .complexity < 5 then "游릭 A"
             elif .complexity < 10 then "游릭 B"
             elif .complexity < 20 then "游리 C"
             elif .complexity < 30 then "游리 D"
             elif .complexity < 40 then "游댮 E"
             else "游댮 F" end) + " |"
          ' >> $GITHUB_STEP_SUMMARY

          if grep -q "游댮 F" $GITHUB_STEP_SUMMARY; then
            EXIT_CODE=1
          fi
          exit $EXIT_CODE
        continue-on-error: false

      - name: Save complexity report for dashboard
        if: always()
        run: |
          # Create a more detailed HTML report
          mkdir -p complexity-report

          # Copy GitHub step summary to the report directory
          cp $GITHUB_STEP_SUMMARY complexity-report/summary.md

          # Generate additional visualizations
          echo "# Code Complexity Visualization" > complexity-report/visualization.md
          echo "" >> complexity-report/visualization.md
          echo "## Top 10 Most Complex Functions" >> complexity-report/visualization.md
          echo "| File | Function | Complexity | Rating |" >> complexity-report/visualization.md
          echo "|------|----------|------------|--------|" >> complexity-report/visualization.md

          # Get top 10 most complex functions
          radon cc src/api -a -nc --json | jq -r '
            [keys[] as $file |
             .[$file][] |
             {file: $file, name: .name, complexity: .complexity}] |
            sort_by(-.complexity) |
            .[0:10] |
            .[] |
            "| \(.file) | \(.name) | \(.complexity) | " +
            (if .complexity < 5 then "游릭 A"
             elif .complexity < 10 then "游릭 B"
             elif .complexity < 20 then "游리 C"
             elif .complexity < 30 then "游리 D"
             elif .complexity < 40 then "游댮 E"
             else "游댮 F" end) + " |"
          ' >> complexity-report/visualization.md

          # Generate a simple HTML index
          cat > complexity-report/index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
            <title>Code Complexity Report</title>
            <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
            <style>
              body { padding: 20px; }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>Code Complexity Report</h1>
              <p>Generated on $(date)</p>

              <div class="mb-4">
                <h2>Reports</h2>
                <ul>
                  <li><a href="summary.md">Summary Report</a></li>
                  <li><a href="visualization.md">Complexity Visualization</a></li>
                </ul>
              </div>
            </div>
          </body>
          </html>
          EOF

      - name: Upload complexity report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: complexity-report
          path: complexity-report/
