# This workflow will install dependencies and run tests

name: Run tests

on:
  push:
  workflow_call:
    inputs:
      run_only_lint:
        description: 'Run only linting part of the workflow'
        type: boolean
        default: false
      run_only_tests:
        description: 'Run only tests part of the workflow'
        type: boolean
        default: false

permissions:
  contents: read
  issues: write

jobs:
  lint:
    if: ${{ github.event_name == 'push' || inputs.run_only_lint == true || inputs.run_only_tests != true }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: psf/black@stable
        with:
          options: "--check --verbose"
      - uses: chartboost/ruff-action@v1
        with:
          args: "check --output-format=github"
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/api/requirements.txt


  test:
    if: ${{ github.event_name == 'push' || inputs.run_only_tests == true || inputs.run_only_lint != true }}
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis
        ports:
          - 6379:6379

      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_satchecker
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Install requirements
      run: |
        python -m pip install --upgrade pip
        pip install -r src/api/requirements.txt
    - name: Install dependencies
      run: |
        pip install pytest pytest-mock pytest-cov
    - name: Create test database
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -c 'DO $$ BEGIN IF NOT EXISTS (SELECT FROM pg_database WHERE datname = '\''test_satchecker'\'') THEN CREATE DATABASE test_satchecker; END IF; END $$;'

    - name: Start Flask application
      run: |
        export FLASK_APP=satchecker.py
        flask run &
      working-directory: src/api
    - name: Run Celery worker
      run: |
        celery -A api.satchecker.celery worker --loglevel INFO &
      env:
        REDIS_URL: redis://localhost:6379/0
      working-directory: src
    - name: Test with pytest
      run: |
        pytest -v --durations=10 --ignore=tests/benchmark
      env:
        REDIS_URL: redis://localhost:6379/0
        PYTHONPATH: src
        SQLALCHEMY_DATABASE_URI: postgresql://postgres:postgres@localhost:5432/test_satchecker
        LOCAL_DB: 1
    - name: TODO to Issue
      uses: alstr/todo-to-issue-action@v4.13.1
      env:
        PROJECTS_SECRET: ${{ secrets.TODO_TO_ISSUE }}
