# This workflow will run code coverage and add a comment to the pull request

name: Code coverage - pull request

on:
  pull_request:
  workflow_call:
    outputs:
      coverage-percentage:
        description: "The total coverage percentage"
        value: ${{ jobs.test.outputs.coverage-percentage }}
      coverage-color:
        description: "The coverage color indicator (red/yellow/green)"
        value: ${{ jobs.test.outputs.coverage-color }}

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      coverage-percentage: ${{ steps.extract-coverage.outputs.coverage-percentage }}
      coverage-color: ${{ steps.extract-coverage.outputs.coverage-color }}

    services:
      redis:
        image: redis
        ports:
          - 6379:6379

      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_satchecker
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Install requirements
      run: |
        python -m pip install --upgrade pip
        pip install -r src/api/requirements.txt
    - name: Install dependencies
      run: |
        pip install pytest pytest-mock pytest-cov
    - name: Create test database
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -c 'DO $$ BEGIN IF NOT EXISTS (SELECT FROM pg_database WHERE datname = '\''test_satchecker'\'') THEN CREATE DATABASE test_satchecker; END IF; END $$;'
    - name: Start Flask application
      run: |
        export FLASK_APP=satchecker.py
        flask run &
      working-directory: src/api
    - name: Run Celery worker
      run: |
          celery -A api.satchecker.celery worker --loglevel INFO &
      env:
          REDIS_URL: redis://localhost:6379/0
      working-directory: src
    - name: Test with pytest
      run: |
        pytest --ignore=tests/benchmark --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=. --cov-config=pytest.ini tests/ | tee pytest-coverage.txt
      env:
        REDIS_URL: redis://localhost:6379/0
        PYTHONPATH: src
        SQLALCHEMY_DATABASE_URI: postgresql://postgres:postgres@localhost:5432/test_satchecker
        LOCAL_DB: 1
    - name: Extract coverage percentage
      id: extract-coverage
      run: |
        COVERAGE_PCT=$(grep -oP 'TOTAL\s+\d+\s+\d+\s+\d+\s+\d+\s+\K\d+%' pytest-coverage.txt | sed 's/%//')
        echo "coverage-percentage=$COVERAGE_PCT" >> $GITHUB_OUTPUT

        # Set color based on coverage percentage
        if [ "$COVERAGE_PCT" -lt "60" ]; then
          echo "coverage-color=red" >> $GITHUB_OUTPUT
        elif [ "$COVERAGE_PCT" -lt "80" ]; then
          echo "coverage-color=yellow" >> $GITHUB_OUTPUT
        else
          echo "coverage-color=green" >> $GITHUB_OUTPUT
        fi

        echo "Code coverage: $COVERAGE_PCT%" >> $GITHUB_STEP_SUMMARY

    - name: Generate HTML coverage report
      run: |
        pytest --ignore=tests/benchmark --cov-report=html:coverage-html-report --cov=. --cov-config=pytest.ini tests/
      env:
        REDIS_URL: redis://localhost:6379/0
        PYTHONPATH: src
        SQLALCHEMY_DATABASE_URI: postgresql://postgres:postgres@localhost:5432/test_satchecker
        LOCAL_DB: 1
    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage-html-report/
    - name: Pytest coverage comment
      id: coverageComment
      if: github.event_name == 'pull_request'
      uses: MishaKav/pytest-coverage-comment@main
      with:
        pytest-coverage-path: ./pytest-coverage.txt
        junitxml-path: ./pytest.xml

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
